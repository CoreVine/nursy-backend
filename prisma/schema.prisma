generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

enum UserType {
  Patient
  Custodian
  Nurse
}

enum OrderStatus {
  Pending
  Accepted
  Rejected
}

enum PaymentStatus {
  Pending
  Completed
  Failed
}

enum Gender {
  Male
  Female
  PrefetNotSay
}

model User {
  id                Int      @id @default(autoincrement())
  username          String
  email             String   @unique
  type              UserType @default(Patient)
  phoneNumber       String @unique
  nationalIdPicture String? @db.Text
  password          String

  isVerified        Boolean @default(false)
  verifiedAt        DateTime?
  verifiedBy        String?

  userData           UserData?
  verificationTokens VerificationToken[]

  orders    Order[] @relation("user_orders")
  requests  Order[] @relation("nurse_requests")

  userChats     Chat[] @relation("user_chats")
  nurseChats    Chat[] @relation("nurse_chats")
  messages      Message[] @relation("user_messages")
  payments      OrderPayment[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  @@map("users")
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  userId    Int @unique
  token     String   @db.VarChar(255)
  createdAt DateTime @default(now())
  expiresAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("verification_tokens")
}

model UserData {
  id                      Int      @id @default(autoincrement())
  userId                  Int @unique
  cv                      String @db.Text
  nusringLicenseFront     String @db.Text
  nusringLicenseBack      String @db.Text
  graduationCertificate   String @db.Text
  nationalIdFront         String @db.Text
  nationalIdBack          String @db.Text

  user            User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt @default(now())

  @@map("user_data")
}

model Order {
  id                Int      @id @default(autoincrement())
  userId            Int
  status            OrderStatus @default(Pending)
  nurseId           Int 
  location          String
  title             String
  description       String? @db.Text
  employmentType    String
  salary            Decimal @db.Decimal(10, 2)
  hourlyFees        Decimal @db.Decimal(10, 2) @default(0)
  locationUrl       String?
  locationLatitude  Float?
  locationLongitude Float?
  illnessType       String?
  gender            Gender
  age               Int?

  payment           OrderPayment?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  user  User @relation("user_orders", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  nurse User @relation("nurse_requests", fields: [nurseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("orders")
}

model OrderPayment {
  id          Int      @id @default(autoincrement())
  orderId     Int @unique
  userId      Int
  totalAmount Decimal @db.Decimal(10, 2) @default(0)
  hourlyRate  Decimal @db.Decimal(10, 2) @default(0)
  totalHours  Decimal @db.Decimal(10, 2) @default(0)

  credit      Decimal @db.Decimal(10, 2) @default(0)
  debit       Decimal @db.Decimal(10, 2) @default(0)
 
  status      PaymentStatus @default(Pending)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  order       Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("order_payments")
}

model Chat {
  id          Int      @id @default(autoincrement())
  userId      Int
  nurseId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  user        User @relation("user_chats", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  nurse       User @relation("nurse_chats", fields: [nurseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  messages    Message[] @relation("message_chat")

  @@unique([userId, nurseId])

  @@map("chats")
}

model Message {
  id          Int      @id @default(autoincrement())
  chatId      Int
  senderId    Int
  content     String   @db.Text
  attachment  String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  chat        Chat @relation("message_chat", fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sender      User @relation("user_messages", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("messages")
}