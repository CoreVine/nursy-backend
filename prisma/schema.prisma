generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "mysql"
  url  	    = env("DATABASE_URL")
}

enum UserType {
  Patient
  Custodian
  Nurse
}

enum TimeType {
  OnSpot
  Scheduled
}

enum OrderStatus {
  Pending
  Accepted
  Rejected
}

enum PaymentStatus {
  Pending
  Completed
  Failed
}

enum PaymentType {
  Hourly
  Services
}

enum Gender {
  Male
  Female
}

model User {
  id                Int      @id @default(autoincrement())
  username          String
  email             String   @unique
  type              UserType @default(Patient)
  phoneNumber       String @unique
  nationalIdPicture String? @db.Text
  password          String
  longitude         Float?
  latitude          Float?
  gender            Gender @default(Male)
  birthDate         DateTime?

  isVerified        Boolean @default(false)
  verifiedAt        DateTime?
  verifiedBy        String?

  userData           UserData?
  wallet             UserWallet?
  verificationTokens VerificationToken[]

  orders    Order[] @relation("user_orders")
  requests  Order[] @relation("nurse_requests")

  userChats     Chat[] @relation("user_chats")
  nurseChats    Chat[] @relation("nurse_chats")
  messages      Message[] @relation("user_messages")
  payments      OrderPayment[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  @@map("users")
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  userId    Int @unique
  token     String   @db.VarChar(255)
  createdAt DateTime @default(now())
  expiresAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("verification_tokens")
}

model UserData {
  id                      Int      @id @default(autoincrement())
  userId                  Int @unique
  cv                      String @db.Text
  nusringLicenseFront     String @db.Text
  nusringLicenseBack      String @db.Text
  graduationCertificate   String @db.Text
  nationalIdFront         String @db.Text
  nationalIdBack          String @db.Text

  user            User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt @default(now())

  @@map("users_data")
}

model UserWallet {
  id          Int      @id @default(autoincrement())
  userId      Int @unique
  balance     Decimal @db.Decimal(10, 2) @default(0)
  debit       Decimal @db.Decimal(10, 2) @default(0)

  user        User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  @@map("users_wallets")
}

model Service {
  id          Int      @id @default(autoincrement())
  name        String
  description String? @db.Text
  salary            Decimal @db.Decimal(10, 2)
  hourlyFees        Decimal @db.Decimal(10, 2) @default(0)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  orders      Order[]
  specificServices SpecificService[]

  @@map("services")
}

model Order {
  id                Int      @id @default(autoincrement())
  userId            Int
  serviceId         Int @default(1)
  nurseId           Int?
  status            OrderStatus @default(Pending)
  title             String
  description       String? @db.Text
  employmentType    String? @db.VarChar(255) @default("Full-Time")
  locationUrl       String?
  longitude         Float?
  latitude          Float?
  illnessTypeId     Int?
  specificServiceId Int?
  gender            Gender 
  age               Int?
  additionalInformation String? @db.Text

  type              TimeType @default(OnSpot)

  date              DateTime? @db.Date 
  time              DateTime? @db.Time

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  illnessType       IllnessType? @relation(fields: [illnessTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  specificService   SpecificService? @relation(fields: [specificServiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  user              User @relation("user_orders", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  nurse             User? @relation("nurse_requests", fields: [nurseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  payment           OrderPayment?
  service           Service @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)


  @@map("orders")
}

model OrderPayment {
  id          Int      @id @default(autoincrement())
  orderId     Int @unique
  userId      Int
  
  totalHours    Float? 
  serviceAmount Float? 
  totalAmount   Float? @default(0)

  paymentUrl              String? @db.Text
  paymentMethod           String? @db.VarChar(255) @default("kashier")
  kashierTranscationId    String? @db.VarChar(255)
  kashierOrderId          String? @db.VarChar(255)
  kashierResponse         String? @db.LongText

  type        PaymentType @default(Hourly)
  status      PaymentStatus @default(Pending)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  order       Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("order_payments")
}

model Chat {
  id          Int      @id @default(autoincrement())
  userId      Int
  nurseId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  user        User @relation("user_chats", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  nurse       User @relation("nurse_chats", fields: [nurseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  messages    Message[] @relation("message_chat")

  @@unique([userId, nurseId])

  @@map("chats")
}

model Message {
  id          Int      @id @default(autoincrement())
  chatId      Int
  senderId    Int
  content     String   @db.Text
  attachment  String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  chat        Chat @relation("message_chat", fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sender      User @relation("user_messages", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("messages")
}

model IllnessType {
  id          Int      @id @default(autoincrement())
  name        String
  description String? @db.Text

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  orders      Order[]

  @@map("illness_types")
}

model SpecificService {
  id          Int      @id @default(autoincrement())
  name        String
  price       Decimal @db.Decimal(10, 2) @default(0)
  description String? @db.Text

  serviceId   Int @default(1)
  service     Service @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  orders      Order[]

  @@map("specific_services")
}

model Settings {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String?  @db.Text
  description String?  @db.Text
  groupName   String   @db.VarChar(255) @default("general")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  @@map("settings")
}